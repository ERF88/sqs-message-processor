package com.example.service;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import software.amazon.awssdk.services.sqs.model.Message;
import com.example.model.ProcessingResult;

import java.util.logging.Logger;

@ApplicationScoped
public class MessageProcessor {
    
    private static final Logger log = Logger.getLogger(MessageProcessor.class.getName());
    
    @Inject
    RateLimiterService rateLimiter;
    
    @Inject
    ExternalServiceClient externalServiceClient;
    
    @Inject
    SQSService sqsService;
    
    public Uni<ProcessingResult> processMessage(Message message) {
        String messageId = message.messageId();
        
        return rateLimiter.tryAcquire()
            .chain(permitted -> {
                if (!permitted) {
                    log.warning("Rate limit atingido para mensagem: " + messageId);
                    return Uni.createFrom().item(new ProcessingResult(0, 1, 0));
                }
                
                return sendToExternalService(message)
                    .chain(() -> sqsService.deleteMessage(message))
                    .map(ignored -> {
                        log.fine("Mensagem processada: " + messageId);
                        return new ProcessingResult(1, 0, 0);
                    });
            })
            .onFailure().recoverWithItem(throwable -> {
                log.severe("Erro ao processar mensagem " + messageId + ": " + throwable.getMessage());
                return new ProcessingResult(0, 0, 1);
            });
    }
    
    private Uni<Void> sendToExternalService(Message message) {
        var request = new ExternalServiceRequest(message.body());
        
        return externalServiceClient.sendMessage(request)
            .onItem().invoke(response -> {
                if (!response.success()) {
                    throw new RuntimeException("Servi√ßo externo falhou: " + response.errorMessage());
                }
            })
            .replaceWithVoid();
    }
}
