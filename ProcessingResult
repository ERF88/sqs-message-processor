package com.example.model;

/**
 * Representa o resultado do processamento de mensagens
 * 
 * @param processed - Número de mensagens processadas com sucesso
 * @param rateLimited - Número de mensagens que não foram processadas devido ao rate limit
 * @param errors - Número de mensagens que falharam no processamento
 */
public record ProcessingResult(int processed, int rateLimited, int errors) {
    
    /**
     * Construtor padrão que inicializa todos os valores como zero
     */
    public ProcessingResult() {
        this(0, 0, 0);
    }
    
    /**
     * Combina dois resultados de processamento
     */
    public ProcessingResult combine(ProcessingResult other) {
        return new ProcessingResult(
            this.processed + other.processed,
            this.rateLimited + other.rateLimited,
            this.errors + other.errors
        );
    }
    
    /**
     * Retorna o total de mensagens processadas (sucesso + falha + rate limited)
     */
    public int total() {
        return processed + rateLimited + errors;
    }
    
    /**
     * Retorna a taxa de sucesso
     */
    public double successRate() {
        int total = total();
        return total > 0 ? (double) processed / total : 0.0;
    }
    
    @Override
    public String toString() {
        return String.format("ProcessingResult[processed=%d, rateLimited=%d, errors=%d, total=%d, successRate=%.2f%%]",
            processed, rateLimited, errors, total(), successRate() * 100);
    }
}
