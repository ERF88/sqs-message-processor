package com.example.service;

import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.*;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.logging.Logger;

@ApplicationScoped
public class SQSService {
    
    private static final Logger log = Logger.getLogger(SQSService.class.getName());
    
    @Inject
    SqsClient sqsClient;
    
    @Inject
    ExecutorService virtualThreadExecutor;
    
    @ConfigProperty(name = "sqs.queue.url")
    String queueUrl;
    
    @ConfigProperty(name = "sqs.max.messages.per.receive", defaultValue = "10")
    int maxMessagesPerReceive;
    
    @ConfigProperty(name = "sqs.visibility.timeout", defaultValue = "60")
    int visibilityTimeoutSeconds;
    
    public Uni<List<Message>> receiveMessages() {
        return Uni.createFrom().item(() -> {
            ReceiveMessageRequest request = ReceiveMessageRequest.builder()
                .queueUrl(queueUrl)
                .maxNumberOfMessages(maxMessagesPerReceive)
                .waitTimeSeconds(1)
                .visibilityTimeoutSeconds(visibilityTimeoutSeconds)
                .build();
            
            ReceiveMessageResponse response = sqsClient.receiveMessage(request);
            return response.messages();
            
        }).runSubscriptionOn(virtualThreadExecutor)
        .onFailure().recoverWithItem(throwable -> {
            log.severe("Erro ao receber mensagens do SQS: " + throwable.getMessage());
            return List.of();
        });
    }
    
    public Uni<Void> deleteMessage(Message message) {
        return Uni.createFrom().item(() -> {
            DeleteMessageRequest deleteRequest = DeleteMessageRequest.builder()
                .queueUrl(queueUrl)
                .receiptHandle(message.receiptHandle())
                .build();
            
            sqsClient.deleteMessage(deleteRequest);
            return null;
            
        }).runSubscriptionOn(virtualThreadExecutor)
        .onFailure().invoke(throwable -> 
            log.severe("Erro ao deletar mensagem: " + throwable.getMessage()));
    }
}
