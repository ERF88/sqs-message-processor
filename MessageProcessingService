package com.example.service;

import io.smallrye.mutiny.Multi;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import software.amazon.awssdk.services.sqs.model.Message;
import com.example.model.ProcessingResult;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.logging.Logger;

@ApplicationScoped
public class MessageProcessingService {
    
    private static final Logger log = Logger.getLogger(MessageProcessingService.class.getName());
    
    @Inject
    SQSService sqsService;
    
    @Inject
    MessageProcessor messageProcessor;
    
    @Inject
    ExecutorService virtualThreadExecutor;
    
    public Uni<ProcessingResult> processThreadMessages(int threadIndex) {
        return sqsService.receiveMessages()
            .chain(messages -> {
                if (messages.isEmpty()) {
                    return Uni.createFrom().item(new ProcessingResult());
                }
                
                log.info(String.format("Thread %d recebeu %d mensagens", threadIndex, messages.size()));
                
                return Multi.createFrom().iterable(messages)
                    .onItem().transformToUni(messageProcessor::processMessage)
                    .merge()
                    .collect().asList()
                    .map(this::aggregateResults);
            })
            .onFailure().recoverWithItem(throwable -> {
                log.severe("Erro na thread " + threadIndex + ": " + throwable.getMessage());
                return new ProcessingResult(0, 0, 1);
            });
    }
    
    private ProcessingResult aggregateResults(List<ProcessingResult> results) {
        int processed = results.stream().mapToInt(ProcessingResult::processed).sum();
        int rateLimited = results.stream().mapToInt(ProcessingResult::rateLimited).sum();
        int errors = results.stream().mapToInt(ProcessingResult::errors).sum();
        
        return new ProcessingResult(processed, rateLimited, errors);
    }
}
